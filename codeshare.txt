



#string[start:stop:step]   
name = "python programming"
print(name[0])
print(name[1])
print(name[0:4])
print(name[8:13])
print(name[0:18])  #python programming
print(name[0:18:1]) #python programming
print(name[0:18:2])
print(name[1:18:2])
print(name[7:18:4])
print(name[::])  #python programming
print(name[:])   #python programming
print(name[::2])
print(name[0::3])
print(name[0:6:3])
print(name[-1])
print(name[-3])
print(name[-5:-2])
print(name[::1])   ##python programming
print(name[::-1])  #gnimmargorp nohtyp

print(name[17])
print(name[-1])
#p   y    t    h    o    n          p    r   o    g    r   a    m     m    i    n   g
#0   1    2    3    4    5    6    7     8   9   10   11   12   13    14   15  16  17
#                                                          -6   -5    -4  -3   -2   -1


name = "python programming"
output = list(name)
name = "    ".join(output)
print(name)






name = "python programming"

print(name.capitalize())
print(name.title())
print(name.replace("python","ruby"))
print(name.center(40))
print(name.center(40,"*"))
print(name.endswith("g"))
print(name.endswith("q"))
print(name.startswith("p"))
print(name.startswith("w"))
print(name.find("gra"))  # if substring found.. returns the starting index
print(name.find("qer"))  # if substring is not round.. retuns -1
print(name.isalpha())
print(name.isalnum())
print(name.isupper())
print(name.isdigit())
print(name.islower())

aname = " python  "
print(len(aname))
print(aname.strip())  # will remove whitespaces at both ends
print(len(aname.strip())) # remove whitespaces first and then get the string length
print(len(aname.rstrip()))
print(len(aname.lstrip()))

print(name.split(" "))  # converting string to the list



aname = " python  "
print(len(aname))
print(aname.strip())  # will remove whitespaces at both ends
print(len(aname.strip())) # remove whitespaces first and then get the string length
print(len(aname.rstrip()))
print(len(aname.lstrip()))

print(name.split(" "))  # converting string to the list

# string formatting
string = "I love {} and {}" # template
print(string.format("python","ML"))
print(string.format("c","C++"))
print(string.format("Hyderabad","Bangalore"))

# fstring 
name = "Rita"
age = 30
print(f"My name is {name} and my age is {age} years")

lang1 = "python"
lang2 = "ML"
print(f"I love {lang1} and {lang2}")




print(name.isalpha())
print(name.isalnum())
print(name.isupper())
print(name.isdigit())
print(name.islower())

# simple if
name = "python"
if name.islower():
    print("String is lower")

# if-else
if name.islower():
    print("String is lower")
    print("inside if")
    print("Still inside if")
else:
    print("String is upper")

# if-elif-eif-elif-elif-else
lang = input("Enter any language :")
if lang == "python":
    print("you entered python")
elif lang == "unix":
    print("you entered unix")
elif lang == "java":
    print("you entered java")
elif lang == "genai":
    print("you entered genai")
else:
    print("you entered someother language")






##################################################################
write a program to reverse a string without using [::-1]

Enter any string:  python
nohtyp



rev_text = ""

for char in text:
    rev_text = char + rev_text
print("String reverse:", rev_text)


# method2
data = list(text)  # ["p","y","t","h","o","n"]
data.reverse()       #['n', 'o', 'h', 't', 'y', 'p']
string = "".join(data)
print("String reverse :",string)


##################################################################
    
write a program to convert the string to uppercase only if its length is more than 10 characters else display the same string.


sample output:
Enter a string: python programming
PYTHON PROGRAMMING


name = input("Enter any name :")

if len(name) > 10 :
    print("String:",name)
else:
    print(f"length of the {name} is less than 10 chars")

##################################################################

write a program to count no. of words in a sentence.

sample output:

Enter a sentence: I love python programming language
word count:  5




name = input("Enter any string :")
data = name.split(" ")
print("no. of words: ", len(data))
##################################################################

write a program to replace all the vowels in a string with *.

Enter a string: python
pyth*n


text = input("Enter a string :")  #python
vowels = "aeiouAEIOU"
result = ""
for char in text:
    if char in vowels:
        result = result + "*"
    else:
        result = result + char
print("Output:", result)



##################################################################

write a program to count how many uppercase , lowercase letters and digits are  in  a string


Enter a string: PyTHon108
Uppercase letters: 3
Lowercase letters: 3
Digits : 3


text = input("Enter a string :")
upper = 0
lower = 0
digits = 0
for char in text:
    if char.isupper() :
        upper+=1
    elif char.islower():
        lower+=1
    elif char.isdigit():
        digits+=1

print("Uppercase letters:", upper)
print("Lowercase letters:", lower)
print("Digits:",digits)

##################################################################

write a progarm to count character frequencies:


Enter a string :  hello

h : 1 time
e : 1 time
l : 2 times
o : 1 time


text = input("Enter a string :")

list_text = list(text)
data= set(text)

for char in data:
    print(char.ljust(5), ":",list_text.count(char),"times")



#################################list methods ####################

alist = [56,34,62,61,39,9,2,4,6,72]

# add single object
alist.append(39)
print("After appending :",alist)
alist.append(41)
print("After appending :", alist)
# adding multiple values to the end of list
alist.extend([81,29,43])
print("After extending :",alist)
#list.insert(index,value)
alist.insert(0,100)
print("After indexing :",alist )
alist.pop(0)  #0 is the index  # list.pop(index) # will remove value at that index
print("After pop opertaion :",alist)
alist.pop(3)
print("After pop opertaion :",alist)
alist.remove(72)  # 72 is the value
print("After removing: :",alist)
alist.reverse()
print("Reversing :",alist)
alist.sort()  # ascending order
print("After sorting :",alist)
alist.sort(reverse=True) # descending order
print("After sorting:",alist)



alist = [56,34,62,61,39,9,2,4,6,72]
for val in alist:
    print(val)

for i in alist:
    print(i)


#################################################################
############################ list assignments #################
##################################################################

wrrite a program to reverse a list without list.reverse() and [::-1]


alist = [45,67,21,65,32,96,10]
print("Initial list:", alist)
rev_list= []

for num in alist:
    rev_list = [num] + rev_list

print("After reversing :", rev_list)
#################################################################

write a program to square each number in a list

nums = [1,2,3,4]

output:
[1,2,9,16]



nums = [1,2,3,4]
output = []
for val in nums:
    output.append(val ** 2)
print(output)


#################################################################

write a program to join a list of words into a single string

words = ["I","love","python","programming"]

output:
I love python programming



words = ["I","love","python","programming"]

string = " ".join(words)
print(string)
#################################################################

write a program to filter words longer than 4 letters

words = ["python","unix","java","oracle"]

output:
["python","oracle"]

#################################################################

Write a program to join corresponding strings from two lists.

first = ["Good", "Data", "Machine"]
second = ["Morning", "Science", "Learning"]

Output:
Good Morning
Data Science
Machine Learning





first = ["Good", "Data", "Machine"]
second = ["Morning", "Science", "Learning"]

count = 0

for item in first:
    finalstring = first[count] + " " + second[count]
    count = count + 1
    print(finalstring)



#zip(list1,list2)

for a,b in zip(first,second):
    finalstring = a + " " + b
    print(finalstring)

#################################################################

Write a program to get all unique words from a list of sentences.

sentences = ["hello world", "hello python", "data world"]

output:
["hello","world","python","data","world"]



#################################################################


Write a program to capitalize only the first letter of each word in a list 
    
#################################################################

data = ["Alice", "", None, "Bob", "Carol", "", None]

Write a program to replace all None or empty strings in a list with 'NA'.

output:
["Alice", 'NA', 'NA', "Bob", "Carol", 'NA', 'NA']
#################################################################





##### dictionary
book = {"chap1":10 , "chap2":20 ,"chap3":30}

print(book)

# add new keyvalue pairs
book["chap4"] = 40    #"chap4":40 will be added to dictionary
book["chap5"] = 50
print(book)

# display individual values
print(book["chap1"]) # 10
print(book["chap2"]) # 20


# display only keys
print(book.keys())

# only values
print(book.values())

# pairs
print(book.items())




################################# dictionary tasks #######################



colors = [
{
"colors": "red",
"values": "#f00"
},
{
"colors": "green",
"values": "#0f0"
},
{
"colors": "blue",
"values": "#00f"
},
{
"colors": "cyan",
"values": "#0ff"
},
{
"colors": "magenta",
"values": "#f0f"
},
{
"colors": "yellow",
"values": "#ff0"
},
{
"colors": "black",
"values": "#000"
}
]

write a program to display all the colors and its values.

sample output :

red #f00
green #0f0
yellow  #ff0
magenta #f0f
..
..
..


for item in colors:
    print(item['colors'].ljust(10) , item["values"])
################################################################

Write a program to display all employee names and their departments.

employees = {
    "E001": {"name": "Alice", "department": "Finance"},
    "E002": {"name": "Bob", "department": "IT"},
    "E003": {"name": "Charlie", "department": "HR"}
}


sample output:

Alice  Finance
Bob    IT


for key,value in employees.items():
    print(value['name'], value['department'])




for i in products:
    print(i['name'], i['price'])
    
    
    
################################################################

Write a program to print all product names and prices.

products = [
    {"id": 101, "name": "Laptop", "price": 75000},
    {"id": 102, "name": "Mobile", "price": 25000},
    {"id": 103, "name": "Tablet", "price": 15000}
]



for i in products:
    print(i['name'], i['price'])

################################################################

Write a program to show student names with grades.

students = [
    {"id": 1, "name": "John", "marks": {"math": 80, "science": 75}},
    {"id": 2, "name": "Jane", "marks": {"math": 90, "science": 85}}
]


for student in students:
    print(student["name"])
    print("--------------------")
    for subjct,marks in student['marks'].items():
        print(subjct,marks)

################################################################

Write a program to print team names and player names.

teams = {
    "TeamA": [
        {"name": "Alice", "role": "Batsman"},
        {"name": "Bob", "role": "Bowler"}
    ],
    "TeamB": [
        {"name": "Charlie", "role": "Allrounder"},
        {"name": "Dave", "role": "Wicketkeeper"}
    ]
}


sample output:

TeamA
-----
Alice
Bob

TeamB
-----
Charlie
Dave



for team,values in teams.items():
    print(team)
    print("--------")
    for i in values:
        print(i['name'])
    print()



################################################################
Write a program to tag each VM as 'Running' or 'Stopped' based on status.

output:
vm1 - Running
vm2 - Stopped



for key,value in infra.items():
    print(key , value['status'])
    
    
    
################################################################

Write a program to deposit 1000 into all customer accounts and display the dictionary


customers = {
    "C001": {"name": "Alice", "balance": 5000},
    "C002": {"name": "Bob", "balance": 12000},
    "C003": {"name": "Charlie", "balance": 3000}
}


output:
{
    "C001": {"name": "Alice", "balance": 6000},
    "C002": {"name": "Bob", "balance": 13000},
    "C003": {"name": "Charlie", "balance": 4000}
}


################################################################

Write a program to list customers with balance over 10000.


customers = {
    "C001": {"name": "Alice", "balance": 5000},
    "C002": {"name": "Bob", "balance": 12000},
    "C003": {"name": "Charlie", "balance": 3000}
}


for key,value in customers.items():
    customers[key]['balance']+=1000
print(customers)

################################################################

write a program to read the below dictionary and display the expected output

info = {
"id": "0001",
"type": "donut",
"name": "Cake",
"image":
{
"url": "images/0001.jpg",
"width": 200,
"height": 200
},
"thumbnail":
{
"url": "images/thumbnails/0001.jpg",
"width": 32,
"height": 32
}
}


sample output:

ID              : 0001
TYPE            : donut
NAME            : Cake
IMAGE URL       :"images/0001.jpg
IMAGE WIDTH     : 200
IMAGE HEIGHT    : 200
THUMBNAIL URL   : "images/thumbnails/0001.jpg"
THUMBNAIL WIDTH : 32
THUMBNAIL HEIGHT:  32



for key,value in info.items():
    if type(value) is str:
        print(key.ljust(20),":", value)
        print("--------")
    if type(value) is dict:
        for skey,svalue in value.items():
            finalkey = key + " " + skey
            print(finalkey,":",svalue)
            


################################################################

data = {
    'Sales': {
        'North': {
            'Alice': 'Manager',
            'Bob': 'Sales Executive',
            'Eve': 'Sales Coordinator',
            'John': 'Account Manager'
        },
        'South': {
            'Charlie': 'Sales Executive',
            'Grace': 'Regional Sales Manager',
            'Mallory': 'Business Development Associate'
        },
        'West': {
            'Oscar': 'Sales Executive',
            'Peggy': 'Account Executive',
            'Victor': 'Territory Sales Manager'
        }
    },
    'Marketing': {
        'Digital': {
            'David': 'SEO Specialist',
            'Hannah': 'Content Strategist',
            'Irene': 'Social Media Manager'
        },
        'Offline': {
            'Eve': 'Event Coordinator',
            'Jake': 'Brand Manager',
            'Liam': 'Public Relations Specialist'
        },
        'Research': {
            'Mia': 'Market Research Analyst',
            'Noah': 'Customer Insights Manager'
        }
    },
    'IT': {
        'Infrastructure': {
            'Quinn': 'Network Engineer',
            'Riley': 'System Administrator',
            'Sam': 'Cloud Architect'
        },
        'Development': {
            'Tina': 'Software Engineer',
            'Uma': 'Backend Developer',
            'Walter': 'Full Stack Developer'
        }
    },
    'HR': {
        'Recruitment': {
            'Yara': 'Recruitment Specialist',
            'Zane': 'Talent Acquisition Manager',
            'Nina': 'HR Coordinator'
        },
        'Employee Relations': {
            'Oliver': 'Employee Relations Specialist',
            'Sophia': 'HR Business Partner'
        }
    },
    'Finance': {
        'Accounting': {
            'Xander': 'Accountant',
            'Yvette': 'Accounts Payable Specialist',
            'Zara': 'Financial Analyst'
        },
        'Audit': {
            'Luna': 'Internal Auditor',
            'Mason': 'Compliance Officer'
        }
    }
}


write a program to display the below output:


Sales
-----
North
South
West


Marketing
--------
Digital
Offline
Research


IT
---
Infrasturcture
Development

HR
---
Recruitment
Employee Relations


################################################################

#### file handling ########
################################################################


#### objects should be of same type

print(4 + 4)   # will work
print("hi" + "python")  # will work
print(4 + "hello")   # doesnt work
print([10,20] + [40,50])  # will work
print( (50,60) + [30,40])  # doesnt work




fobj = open("customers.txt","w")

fobj.write("python programming\n")
fobj.write("unix shell\n")

for val in range(1,10):
    fobj.write(str(val)  + "\n")

fobj.close()








'''
fobj = open("customers.txt","w")

fobj.write("python programming\n")
fobj.write("unix shell\n")
fobj.writelines(["java","unix","python"])
for val in range(1,10):
    fobj.write(str(val) + "\n")

fobj.close()
'''

# not required to close the file
# context manager
# If any line starts with the keyword 'with' ... it is called as context manager
# Advantage : file is closed automatically ... NOT required to close manually.


# pythonic way   # lastest way

# If path is not defined .. file gets created in same directory
with open("customerinfo.csv","w") as fobj:
    fobj.write("python programming\n")
    fobj.write("unix shell\n")
    fobj.writelines(["java","unix","python"])
    print(fobj.closed)

#file is closed here
print(fobj.closed)
    



with open("customerinfo.csv","w") as fobj,open("customerdata.txt","w") as fobj1:
    fobj.write("python programming\n")
    fobj.write("unix shell\n")
    fobj.writelines(["java","unix","python"])
    fobj1.write("this is file2\n")
    print(fobj.closed)

#file is closed here
print(fobj.closed)
    







# method1
#fobj acts like cursor or handler
with open("customers.txt","r") as fobj:
    for line in fobj:
        line = line.strip()
        print(line)


### display the names only
with open("customers.txt","r") as fobj:
    for line in fobj:
        line = line.strip()
        output = line.split(",")
        print(output[0])

# method2
with open("customers.txt","r") as fobj:
    print(fobj.readlines())  # display all the lines in list


#method3 : just like ctrl+A  ctrl+C  ctrl+V
# not suggested for bigger files 
with open("customers.txt","r") as fobj:
    print(fobj.read())  # will read the whole file at once

#method4
import csv  # Advantage: Each line is automatically converting to list
with open("customers.txt","r") as fobj:
    reader = csv.reader(fobj)  # converting file object to csv object
    for line in reader:
        print(line)

#method5
import pandas
print(pandas.read_csv("customers.txt"))



pip install pandas



########################## file handling ###########################


write a program to read employee.csv and display all the lines from the file

###########################################################################

write a program go read employee.csv and display all the distinct workclasses.

State-gov
Self-emp-not-inc
Private
Federal-gov
Local-gov





'''
write a program go read employee.csv and display all the distinct workclasses.

State-gov
Self-emp-not-inc
Private
Federal-gov
Local-gov

'''

import csv
workset = set()
with open("employee.csv") as fobj:
    header = fobj.readline()
    reader = csv.reader(fobj)
    # processing
    for line in reader:
        workclass = line[1]
        workset.add(workclass.strip())
    # displaying output
    for item in workset:
        print(item)


import csv
print("**** using dictionaries *****")
workdict = dict()
with open("employee.csv") as fobj:
    header = fobj.readline()
    reader = csv.reader(fobj)
    # processing
    for line in reader:
        workclass = line[1]
        workdict[workclass] = 1      #workdict = {"Never-worked":1 , "Federal-gov":1,"Private":1,"State-gov":1}
    # displaying output
    for item in workdict:
        print(item)
###########################################################################

write a program go read employee.csv and display the below output

Total no. of males : xxx
Total no. of females: xx




import csv
workset = set()
mcount = 0
fcount = 0
with open("employee.csv") as fobj:
    header = fobj.readline()
    reader = csv.reader(fobj)
    for line in reader:
        gender = line[9].strip()
        if gender == "Male":
            mcount+=1
        elif gender == "Female":
            fcount+=1
    print("Total no. of males   :", mcount)
    print("Total no. of females :", fcount)
###########################################################################

write a program go read employee.csv and display all the records where

education is  Bachelors and Gender is Female.

also display total no. records matching above conditions.




import csv
count = 0
with open("employee.csv") as fobj:
    header = fobj.readline()
    reader = csv.reader(fobj)
    for line in reader:
        if line[3].strip() == "Bachelors" and line[9].strip() == "Female":
            print(line)
            count = count + 1
    
    print("No. of records matching above conditions :", count)


###########################################################################

write a program to read employee.csv and replace all the lines containing
 United-States with USA and write the output to 12_June_2025.csv
 	


with open("employee.csv") as fr,   open("usa_data.csv","w") as fw:
    for line in fr:
        line = line.strip()
        line = line.replace("United-States","USA")
        print(line)
        fw.write(line + "\n")

###########################################################################

Write a Python program to read employee.csv and 
use a dictionary to count how many employees belong to each race.

{'White': 27816, 'Black': 3124, 'Asian-Pac-Islander': 1039}




with open("employee.csv","r") as fobj:
    reader = csv.DictReader(fobj)
    for line in reader:
        race = line['race'].strip()
        if race in race_count:
            race_count[race]+=1
        else:
            race_count[race] = 1
    
print(race_count)

##########################################################################

Write a Python program to read employee.csv and create a short summary sentence and display all the lines


39-year-old Male working as Adm-clerical earns <=50K.




import csv

race_count = dict()


with open("employee.csv","r") as fobj:
    reader = csv.DictReader(fobj)
    for line in reader:
        age = line['age'].strip()
        gender = line['gender'].strip()
        occupation = line['occupation'].strip()
        score = line['income']

        print("{}-year-old {} working as {}earns {}".format(age,gender,occupation,score))




import csv

race_count = dict()


with open("employee.csv","r") as fobj:
    reader = csv.DictReader(fobj)
    for line in reader:
        age = line['age'].strip()
        gender = line['gender'].strip()
        occupation = line['occupation'].strip()
        score = line['income']

        print("{}-year-old {} working as {}earns {}".format(age,gender,occupation,score))



##########################################################################

Write a program to categorize employees into age groups and list their education:

<20: Teen

20–35: Young Adult

36–60: Adult

>60: Senior

output:
{"Teen": 45 , "Young Adult": 56 , "Adult" : 56 ,  "Senior":76  }

##########################################################################

Write a program to find the workclass string with the maximum number of characters.

Self-emp-not-inc
##########################################################################





import sys
try:
    #fobj acts like cursor or handler
    with open("customers1111.txt","r") as fobj:
        for line in fobj:
            line = line.strip()
            print(line)
except TypeError as err:
    print(err)
    print(sys.exc_info())
except ValueError as err:
    print(err)
    print(sys.exc_info())
except (KeyError,IndexError) as err:
    print("Invalid index or key")
    print(err)
    print(sys.exc_info())
except FileNotFoundError as err:
    print("File is not found")
    print(err)
    print(sys.exc_info())
except Exception as err:  # default exception
    print(err)
    print(sys.exc_info())
print("regular program")







import sys
try:
    #fobj acts like cursor or handler
    fobj =  open("customers.txt","r")

except Exception as err:  # default exception
    print(err)
    print(sys.exc_info())
else:
    for line in fobj:
        line = line.strip()
        print(line)
finally:
    print("end of file reading")






################################### frequently used builtin libraries #############################

os         : os level activities
math       : mathematical operations
sys        :  sys and python config data
shutil     : copy,move, rmtree  etc
urllib     : read the web, downloading the files
logging    : logging all the events
smtplib    : sending the mails
ftplib     : performing ftp operations
sysconfig  :  sys and python config data
zipfile    : create/extract the zip files
rarfile    : create/extract the rar files
cryptopgraphy : encrypting and decrypting the data or files
tarfile    : create/extract the tar files
filecmp    : comparing files or directories
sqlite3    : python default database
csv        : reading/writing csv files
xml        : reading/writing xml files
calendar   : display month,year calendar info
datetime   : working with date n time
time       : working with date n time
fractions  : working with decimal values
glob       : display all the files
heapq      : more of array operations ( getting largest among list )
subprocess : executing system commands in python (  subprocess.getoutput("ls -ltr")
pdb        : python debugger
platform   : platform information
random     : random operations ( shuffling , random digit ... )
re         : grep + awk + sed
socket     : networking programming
stat       : stats of the file
statistics : basic statistics
pathlib	   : Object-oriented file path operations
time	     : Delays, timestamps, performance checks
logging	   : Logging for scripts/apps (replace print for real apps)
argparse	 : Command-line interface (CLI) argument parsing
configparser : 	Read/write .ini config files
json	     :Serialize/deserialize JSON (common in APIs)
uuid	     : Generate unique IDs (useful in files, databases)
statistics	:Basic stats: mean, median, stdev
random	    :Random number generation, sampling
collections	:Specialized containers (defaultdict, Counter, namedtuple)
traceback	   :Print/format exception tracebacks
warnings	   :Raise and handle warnings





######################################################################################
write a program to display all the files and directories from current directory line by line


import os
try:
    files = os.listdir()
    for file in files:
        print(file)
except Exception as err:
    print(err)

######################################################################################


write a progarm to display all the files and directories from C:

######################################################################################

#write a progarm to display all the files and directories from C:

######################################################################################

write a program to delete all the .xlsx files from current directory





'''
write a program to delete all the .xlsx files from current directory


'''

import os
try:
    files = os.listdir()

    for file in files:
        if file.endswith("xlsx"):
            os.remove(file)
            print(file, "is removed")
except Exception as err:
    print(err)

import os
try:
    files = os.listdir()

    for file in files:
        if ".xlsx" in file:  
            os.remove(file)
            print(file, "is removed")
except Exception as err:
    print(err)

import os
import re
try:
    files = os.listdir()

    for file in files:
        if re.search("xlsx",file,re.I): 
                os.remove(file)
                print(file, "is removed")
except Exception as err:
    print(err)
######################################################################################


write a program to display all the files that are ending with .csv files from current directory


######################################################################################

write a script to create 10 directories in the current directory as below.

dir1
dir2
dir3
dir4
..
..
dir10



####################################################################################



write a script to perform the below operations :

1. display current working directory
2. display login name
3. display all environment variables
4. display today's date ( timestamp )
5. display May months calendar
6. display all .py files and its size in bytes
7. display the modified time of employees.csv file
8. display current process id



import os
import datetime
import calendar
try:
    pwd = os.getcwd()
    print("Current working directory :", pwd)
    print("loginame :", os.getlogin())
    print("display all enviornment variables:")
    for key,value in os.environ.items():
        print(key)
        print(value)
        print("------")
    print(datetime.datetime.now())
    print(calendar.month(2025,5))
    print(calendar.calendar(2025))


    for file in os.listdir():
        if file.endswith(".py"):
            print(file.ljust(20), os.path.getsize(file),"bytes")

    print(os.getpid())
except Exception as err:
    print(err)


####################################################################################



write a script to display the below information 

1. CPU percentage
2. Memory info ( total memory, available, used)
3. process info
4. disk partitions
5. network statistics
4. platform details ( like OS name , model , python version)
5. boot time of your system
6. IP Address of your system
7. hostname of the system





'''

write a script to display the below information 

1. CPU percentage
2. Memory info ( total memory, available, used)
3. process info
4. disk partitions
5. network statistics
4. platform details ( like OS name , model , python version)
5. boot time of your system
6. IP Address of your system
7. hostname of the system

'''


import psutil
import platform
import socket
import datetime
print(psutil.cpu_percent(interval=1))
print(psutil.virtual_memory())
print(psutil.disk_partitions())
#print(psutil.net_connections())
print(platform.platform())
print(platform.python_version())
print(psutil.boot_time())  # will return epoch time in seconds
print(datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S"))

hostname = socket.gethostname()  
ip_address = socket.gethostbyname(hostname)  
host_info = socket.gethostbyaddr(ip_address)  

print("Hostname:", hostname)
print("IP Address:", ip_address)

####################################################################################



https://dev.mysql.com/get/Downloads/MySQLInstaller/mysql-installer-community-8.0.42.0.msi




open mysql command line client
-------------------------------


step1: create database
----------------
create database empdb;


step2:  access your database
----------------------------
use empdb;

step3 : create table 
--------------------
create table employee ( workclass varchar(100) , education varchar(100)) ;

step4: insert few records 
------------------------
insert into employee values('private' , 'graduation');
insert into employee values('public' , 'btech');

step5:
------
commit;





###task1
write a program to read employee.csv and insert workclass,education columns data to the database

How to check the output?

import os
import pymysql
import csv
import sys
try:
    #step1
    conn = pymysql.connect(host="localhost",port=3306,user="root",password="yourpassword")
    print(conn)   ##  0x3kdky
    if conn:
        cursor = conn.cursor() 
        #step2:
        filename = "employee1111.csv"
        if os.path.exists(filename) and os.path.isfile(filename):
            with open(filename,"r") as fobj:
                reader = csv.reader(fobj)
                count = 0
                for line in reader:
                    workclass = line[1]
                    education = line[3]
                    query = "insert into empdb.employee values('{}','{}')".format(workclass,education)
                    #step3
                    cursor.execute(query)
                    #step4
                    count = count + 1
                    #step5
                print(count ,  "records inserted")
                conn.commit()   
                conn.close()
        else:
            print("file not found..")
except Exception as err:
    print(err)
    print(sys.exc_info())

##################################################################



###task2
create a table in mysql considering all the columns from employee.csv

write a program to insert all the rows from employee.csv to the database







CREATE TABLE employee_data ( age VARCHAR(10), workclass VARCHAR(50), fnlwgt VARCHAR(20), education VARCHAR(50), educational_num VARCHAR(10), marital_status VARCHAR(50),occupation VARCHAR(50),relationship VARCHAR(50),race VARCHAR(30),gender VARCHAR(10),capital_gain VARCHAR(10),capital_loss VARCHAR(10), hours_per_week VARCHAR(10),native_country VARCHAR(50), income VARCHAR(10) );






import os
import pymysql
import csv
import sys
try:
    #step1
    conn = pymysql.connect(host="localhost",port=3306,user="root",password="yourpassword")
    print(conn)   ##  0x3kdky
    if conn:
        cursor = conn.cursor() 
        #step2:
        filename = "employee.csv"
        if os.path.exists(filename) and os.path.isfile(filename):
            with open(filename,"r") as fobj:
                

                reader = csv.reader(fobj)
                count = 0
                for line in reader:

                    query = "insert into empdb.employee_data values('{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}','{}')".format(*line)
                    #step3
                    cursor.execute(query)
                    #step4
                    count = count + 1
                    #step5
                print(count ,  "records inserted")
                conn.commit()   
                conn.close()
        else:
            print("file not found..")
except Exception as err:
    print(err)
    print(sys.exc_info())



CREATE TABLE employee_data ( age VARCHAR(100), workclass VARCHAR(100), fnlwgt VARCHAR(100), education VARCHAR(100), educational_num VARCHAR(100), marital_status VARCHAR(100),occupation VARCHAR(100),relationship VARCHAR(100),race VARCHAR(100),gender VARCHAR(100),capital_gain VARCHAR(100),capital_loss VARCHAR(100), hours_per_week VARCHAR(100),native_country VARCHAR(100), income VARCHAR(100) );


CREATE TABLE employee_data ( age VARCHAR(100), workclass VARCHAR(100), fnlwgt VARCHAR(100), education VARCHAR(100)
, educational_num VARCHAR(100), marital_status VARCHAR(100),occupation VARCHAR(100),relationship VARCHAR(100)
,race VARCHAR(100),gender VARCHAR(100),capital_gain VARCHAR(100),capital_loss VARCHAR(100), hours_per_week VARCHAR(100)
,native_country VARCHAR(500), income VARCHAR(100) );


csv file -----> database


#######################################    database ------> excel file

write a program to insert all the records from database to excel file

openpyxl : reading and writing excel file

#######################################






# fixed arguments
def display(a,b):
    c = a + b
    return c

total = display(10,20)
print(total)

### default arguments
def display(a = 0,b = 0,c = 0,d = 0):
    print(a,b,c,d)

display()
display(10)
display(10,20)
display(10,20,30)
display(10,20,30,40)


# variable length arguments
def display(*args):
    for val in args:
        print(val)

display(10,20,30,40,5,56,4343,43)


def displayinfo(**kwargs):   #**kwargs is the dicttionary
    print(kwargs)
    for key,value in kwargs.items():
        print(key,value)


displayinfo(chap1 = 10 , chap2 = 20)



########################################### lambda function ################


#lambda function
# lambda is the replacement of single liner function only
# it is faster in terms of execution
# pythonic way
#functioname = lambda variables : expression

display = lambda a,b : a + b

print(display(10,20))


# 1. Add two numbers
add = lambda a, b: a + b
print(add(3, 5))  # 8

# 2. Square of a number
square = lambda x: x ** 2
print(square(4))  # 16

# 3. Length of a string
length = lambda s: len(s)
print(length("python"))  # 6


# 4. Multiply three numbers
mul = lambda a, b, c: a * b * c
print(mul(2, 3, 4))  # 24


# 5. Convert to uppercase
upper = lambda s: s.upper()
print(upper("hello"))  # HELLO


# 6. Reverse string
reverse = lambda s: s[::-1]
print(reverse("lambda"))  # adbmal






# 1. Max of two numbers
maximum = lambda a, b: a if a > b else b
print(maximum(10, 20))  # 20




# 2. Pass or Fail
result = lambda marks: "Pass" if marks >= 35 else "Fail"
print(result(30))  # Fail




# 3. Even or Odd
even_odd = lambda x: "Even" if x % 2 == 0 else "Odd"
print(even_odd(9))  # Odd



# 4. Positive, Negative or Zero
sign = lambda x: "Positive" if x > 0 else "Negative" if x < 0 else "Zero"
print(sign(-5))  # Negative




# 5. Grade categorization
grade = lambda m: 'A' if m >= 90 else 'B' if m >= 75 else 'C'
print(grade(80))  # B


# 6. Adult or Minor
age_check = lambda age: "Adult" if age >= 18 else "Minor"
print(age_check(17))  # Minor

# 7. Number is multiple of 3
multiple_of_3 = lambda x: "Yes" if x % 3 == 0 else "No"
print(multiple_of_3(9))  # Yes

# 8. Leap year check
leap_year = lambda y: "Leap" if (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0) else "Not Leap"
print(leap_year(2020))  # Leap

# 9. Compare lengths
compare_len = lambda a, b: "Equal" if len(a) == len(b) else "Not Equal"
print(compare_len("hi", "by"))  # Equal

# 10. Password strength
password_check = lambda pwd: "Strong" if len(pwd) >= 8 else "Weak"
print(password_check("pass123"))  # Weak






######## lambda and map()


alist = [10,20,30,40,50]

# map(function,iterable)
increment = lambda x : x + 5
print(list(map(increment, alist)))


print(dir(__builtins__))


#Convert to strings
nums = [1, 2, 3, 4, 5]
to_str = list(map(lambda x: str(x), nums))
print(to_str)  # ['1', '2', '3', '4', '5']


#Convert floats to ints
floats = [2.5, 3.6, 4.1]
ints = list(map(lambda x: int(x), floats))
print(ints)  # [2, 3, 4]



#Uppercase names
names = ["alice", "bob", "carol"]
upper_names = list(map(lambda x: x.upper(), names))
print(upper_names)  # ['ALICE', 'BOB', 'CAROL']



#Extract domain from email
emails = ["user1@gmail.com", "user2@yahoo.com"]
domains = list(map(lambda x: x.split("@")[1], emails))
print(domains)


names = ["Alice", "Bob"]
greeted = list(map(lambda x: "Mr./Ms. " + x, names))
print(greeted)














import re

line  = "The rain in Spain"
x = re.findall("ai", line)
print(x)


line = "The rain in Spain"
x = re.findall("Portugal", line)
print(x)


line = "The rain in Spain"
x = re.search("\s", line)
print("The first white-space character is located in position:", x.start())


line = "The rain in Spain"
x = re.search("Portugal", line)
print(x)



line = "The rain in Spain"
x = re.sub("\s", "9", line)
print(x)


import re
string = 'hello 12 hi 89. Howdy 34'
pattern = '\d+'
result = re.findall(pattern, string)
print(result)


import re
string = 'Twelve:12 Eighty nine:89.'
pattern = '\d+'
result = re.split(pattern, string)
print(result)





import re
# multiline string
string = 'abc    12de 23 \n f45 6'
# matches all whitespace characters
pattern = '\s+'
# empty string
replace = ' '
new_string = re.sub(pattern, replace, string)
print(new_string)



import re
string = '39801 356, 2102 1111'
# Three digit number followed by space followed by two digit number
pattern = '(\d{3}) (\d{2})'
# match variable contains a Match object.
match = re.search(pattern, string)
if match:
  print(match.group())
else:
  print("pattern not found")
# Output: 801 35





import re

regex = '^[\w]+@[\w]+'

email = "giridhar276@gmail.c33om"

if re.search(regex,email):
    print("valid email")
else:
    print("Invalid email")





import re
regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
email = "giridhar276@gmail.com"

if re.search(regex,email):
    print("valid email")
else:
    print("Invalid email")






###### web scrapping #######
#step1
import requests 
from bs4 import BeautifulSoup
url = "https://www.google.com/"
response = requests.get(url)
if response.status_code == 200 :
    content = response.text
    #print(content)
    #step2 : read the content from html using beautifulsoup library
    soup = BeautifulSoup(content, 'html.parser')

    for link in soup.find_all('a'):
        print(link.get('href'))
        print("-----------")





####################################

write a program to read https://www.wikipedia.org/  website and display all the URLs from this portal 
that starts with https only and write all the urls to the excel file(25_Jun_2025.xlsx ) with todays timestamp.

use try -expect blocks
validations







####################################
#. list comprehension
##################################



# method1
for val in range(1,10):
    print(val)


# method2 - using list comprehension
# [expression forloop]
output = [  val+5  for val in range(1,10)]
print(output)



squares = [x**2 for x in range(10)]
print(squares)



for val in range(1,10):
    if val % 2 == 0:
        print(val)


evens = [x for x in range(2,20) if x % 2 == 0]
print(evens)


words = ['Python', 'is', 'awesome', 'AI', 'GPT']
short_words = [word for word in words if len(word) <= 3]
print(short_words)



names = ['alice', 'bob', 'charlie']
upper_names = [name.upper() for name in names]









import requests
import json
def get_all_products():
    url= "https://fakestoreapi.com/"
    endpoint = "products"
    response = requests.get(url + endpoint))
    print("GET All Products:")
    data = response.json()
    for item in data:
        print("ID         :",item['id'])
        print("Item       :",item['title'])
        print("Description:",item['description'])
        print("price      :",item['price'])
        print("-------")


get_all_products()



########## post method 

import requests
# POST Create a Product
def create_product():
    payload = {
        "title": "test product",
        "price": 13.5,
        "description": "lorem ipsum set",
        "image": "https://i.pravatar.cc",
        "category": "electronic"
    }
    response = requests.post("https://fakestoreapi.com/products", json=payload)
    print("POST Create a Product:")
    print(response.json())



create_product()


############################################################


import requests
import os

token = "fdsfasfafdxzfdasasfasfddafs" # Set your GitHub token in environment variable
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

data = {
    "name": "my-new-repo",
    "description": "Created via REST API",
    "private": False
}

response = requests.post("https://api.github.com/user/repos", headers=headers, json=data)
print(response.json())

response = requests.post("https://api.github.com/user/repos",  json=data,auth=('giridhar276','yourtoken'))
print(response.json())

############################################################

########### requests.put() ##########################


import requests
def update_product(product_id):
    data = {
        "title": "updated product",
        "price": 15.0,
        "description": "updated description",
        "image": "https://i.pravatar.cc",
        "category": "electronic"
    }
    response = requests.put(f"https://fakestoreapi.com/products/{product_id}", json=data)
    print("PUT Update a Product:")
    print(response.json())




update_product(10)


############################


import requests
# DELETE a Product
def delete_product(product_id):
    response = requests.delete(f"https://fakestoreapi.com/products/{product_id}")
    print("DELETE a Product:")
    print(response.status_code)


delete_product(1)


###########################




##################################################
#################### display all repos ############
import requests
username = "octocat"
url = f"https://api.github.com/users/{username}/repos"

response = requests.get(url)
repos = response.json()
for repo in repos:
    print(f"{repo['name']} - {repo['html_url']}")


##################################################
#################### create new repo ###############
##################################################

import requests
import os

token = "your token" # Set your GitHub token in environment variable
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

data = {
    "name": "my-new-repo",
    "description": "Created via REST API",
    "private": False
}

response = requests.post("https://api.github.com/user/repos", headers=headers, json=data)
print(response.json())

##################################################
##################### requests.delete() ################
##################################################
import requests
owner = "your-username"
repo = "repo-to-delete"
token = ""
url = f"https://api.github.com/repos/{owner}/{repo}"
headers = {
    "Authorization": f"token {token}",
    "Accept": "application/vnd.github.v3+json"
}

response = requests.delete(url, headers=headers)
print("Deleted!" if response.status_code == 204 else response.text)


########################################




import requests

# E-commerce API: Fake Store API
# Base URL: https://fakestoreapi.com

# GET All Products
def get_all_products():
    response = requests.get("https://fakestoreapi.com/products")
    print("GET All Products:")
    print(response.json())

# POST Create a Product
def create_product():
    data = {
        "title": "test product",
        "price": 13.5,
        "description": "lorem ipsum set",
        "image": "https://i.pravatar.cc",
        "category": "electronic"
    }
    response = requests.post("https://fakestoreapi.com/products", json=data)
    print("POST Create a Product:")
    print(response.json())

# PUT Update a Product
def update_product(product_id):
    data = {
        "title": "updated product",
        "price": 15.0,
        "description": "updated description",
        "image": "https://i.pravatar.cc",
        "category": "electronic"
    }
    response = requests.put(f"https://fakestoreapi.com/products/{product_id}", json=data)
    print("PUT Update a Product:")
    print(response.json())

# DELETE a Product
def delete_product(product_id):
    response = requests.delete(f"https://fakestoreapi.com/products/{product_id}")
    print("DELETE a Product:")
    print(response.status_code)

if __name__ == "__main__":
    get_all_products()
    create_product()
    update_product(100)  # Replace with a valid product ID
    get_all_products()
    delete_product(1)  # Replace with a valid product ID


#################################################



# procedural
print("hello")


# object oriented

class Display:
    def displayOutput(self):
        print("hello")

d1 = Display()
d1.displayOutput()

####################

#class - create our own implementation
class Employee:
    def displayName(self):
        print("Emp name :","rita")
    def displayAddress(self):
        print("Address:", "mumbai")

# object creation
emp1 = Employee()
emp1.displayName()
emp1.displayAddress()


################################


#class - create our own implementation

class Employee:
    #constructor - this method is invoked automatically when object is created
    def __init__(self,name):
        self.name = name
    def displayName(self):
        print("Emp name :",self.name)

# object creation
emp1 = Employee('Ram')
emp1.displayName()

emp2 = Employee('Rao')
emp2.displayName()

emp3 = Employee('Gita')
emp3.displayName()


####################



class Product:
    def __init__(self, price, item_name, weight, brand, status='For Sale'):
        self.price = price
        self.item_name = item_name
        self.weight = weight
        self.brand = brand
        self.status = status

    def sell(self):
        self.status = 'sold'
        return self

    def add_tax(self, tax):
        return "Price after sales tax: ${}".format(self.price * (1 + (tax/100.0)))

    def return_item(self, reason_for_return):
        if reason_for_return.lower() == 'defective':
            self.status = 'Defective'
            self.price = 0
        elif reason_for_return.lower() == 'like new':
            self.status = 'For Sale'
        elif reason_for_return.lower() == 'open box':
            self.status = 'Used'
            self.price = 0.8 * self.price # 20% discount
        return self

    def display_all(self):
        print("Price: ${}".format(self.price))
        print("Item Name:", self.item_name)
        print("Weight: {}g".format(self.weight))
        print("Brand:", self.brand)
        print("Status:", self.status)
        return self

chocolate = Product(5, 'chocolate', 100, 'Dairy Milk')

print("Initial Specs: ")
chocolate.display_all()

print ("Specs after adding tax: ")
print(chocolate.add_tax(15))

print("Specs after selling: ")
chocolate.sell().display_all()

print("Specs after returning: ")
chocolate.return_item('defective').display_all()

###################################


class Call:
    def __init__(self, id, name, phone_number, time_of_call, reason_for_call):
        self.id = id
        self.name = name
        self.phone_number = phone_number
        self.time_of_call = time_of_call
        self.reason_for_call = reason_for_call

    def display(self):
        print("ID:", self.id)
        print("Name:", self.name)
        print("Phone Number:", self.phone_number)
        print("Time of call (in HHMM format):", self.time_of_call)
        print("Reason for call:", self.reason_for_call)

class CallCenter:
    def __init__(self):
        self.calls = []
        self.queue_size = 0
    def add(self, call):
        call_list = []
        call_list.append(call.id)
        call_list.append(call.name)
        call_list.append(call.phone_number)
        call_list.append(call.time_of_call)
        call_list.append(call.reason_for_call)
        self.calls.append(call_list)
        self.queue_size += 1
        return self
    def remove(self):
        self.calls.pop(0)
        self.queue_size -= 1
        return self
    def info(self):
        print('Length of queue:', self.queue_size)
        for value in self.calls:
            print("Name:", value[1])
            print("Phone Number:", value[2])
call1 = Call(1, 'Ash', 123, 1234, 'thanks')
call1.display()
call_center = CallCenter()
call_center.add(call1)
call_center.info()
# print call_center.calls

####################################################








import requests
from bs4 import BeautifulSoup

class WebScraper:
    def __init__(self, url):
        self.url = url
        self.page_content = None

    def fetch_content(self):
        """Fetch the HTML content of the URL"""
        try:
            response = requests.get(self.url)
            if response.status_code == 200:
                self.page_content = response.text
                print(f"Successfully fetched content from: {self.url}")
            else:
                print(f"Failed to fetch page. Status Code: {response.status_code} - {self.url}")
        except Exception as e:
            print(f"Error fetching the page: {e} - {self.url}")

    def show_title(self):
        """Parse the HTML and print the title of the page"""
        if self.page_content:
            soup = BeautifulSoup(self.page_content, 'html.parser')
            title = soup.title.string if soup.title else "No title found"
            print(f"Page Title: {title}")
        else:
            print("No page content available. Please fetch content first.")

    def show_links(self):
        """Extract and print all hyperlinks from the page"""
        if self.page_content:
            soup = BeautifulSoup(self.page_content, 'html.parser')
            links = soup.find_all('a', href=True)
            for link in links:
                print(link['href'])
            else:
                print("No links found on the page.")
        else:
            print("No page content available. Please fetch content first.")



urls = [
        "https://www.wikipedia.org",
        "https://www.python.org"
    ]

for url in urls:
    print(f"\n📄 Scraping URL: {url}")
    scraper = WebScraper(url)
    scraper.fetch_content()
    scraper.show_title()
    scraper.show_links()
    
    

########################################






import os
import sys
import shutil

# Define a class
class FileManager:
    def __init__(self, source_path, destination_path):
        self.source_path = source_path  # instance variable
        self.destination_path = destination_path  # instance variable

    def display_paths(self):
        """Display source and destination paths"""
        print(f"Source Path: {self.source_path}")
        print(f"Destination Path: {self.destination_path}")

    def copy_file(self):
        """Copy file from source to destination"""
        try:
            shutil.copy(self.source_path, self.destination_path)
            print(f"File copied successfully from {self.source_path} to {self.destination_path}")
        except FileNotFoundError:
            print(f"Error: Source file not found - {self.source_path}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


# Example usage
if __name__ == "__main__":
    # Create objects (instances)
    file1 = FileManager("sample.txt", "source")
    #file2 = FileManager("sample.txt", "destination")

    # Access methods
    file1.display_paths()
    file1.copy_file()

    print()

    ##file2.display_paths()
    ##file2.copy_file()
    
    
    
###################################################

class Patient:
    def __init__(self, id, name, allergies, bed_number=None):
        self.id = id
        self.name = name
        self.allergies = allergies
        self.bed_number = bed_number
class Hospital:
    def __init__(self, name, capacity):
        self.name = name
        self.patients = []
        self.capacity = capacity
    def add(self, patient):
        if len(self.patients) >= self.capacity:
            print('Sorry! The Hospital is full!')
        else:
            patient_dictionary = {
            'ID': patient.id,
            'Name': patient.name,
            'Allergies': patient.allergies,
            'Bed Number': patient.bed_number
            }
            self.patients.append(patient_dictionary)
            print ('{} has been admitted.'.format(patient.name))
    def discharge(self, name):
        for value in self.patients:
            if value['Name'] == name:
                value['Bed Number'] = None
                self.patients.remove(value)
patient1 = Patient(1, 'Ash', 'Wool', 1)
patient2 = Patient(1, 'Sterling', 'Chocolate', 3)
patient3 = Patient(1, 'Alish', 'Puppies', 7)
patient4 = Patient(1, 'Andre', 'Kitties', 9)
hospital = Hospital('kings Hospital', 3)
hospital.add(patient1)
hospital.add(patient2)
hospital.add(patient3)
hospital.add(patient4)
hospital.discharge('Alish')
hospital.discharge('Sterling')
hospital.add(patient4)



################

#### access specifiers

class BankAccount:
    def __init__(self, owner, balance):
        self.owner = owner         # public
        self._balance = balance    # protected
        self.__pin = 1234          # private

    def display(self):
        print(f"Owner: {self.owner}")
        print(f"Balance: {self._balance}")
        print(f"PIN: {self.__pin}")  # Accessible within class

account = BankAccount("Alice", 1000)
account.display()

print(account.owner)       # Public - accessible
print(account._balance)    # Protected - accessible but not recommended
print(account.__pin)     # Error: Private attribute not directly accessible


###########


# Parent class
class Vehicle:
    def start_engine(self):
        print("Engine started.")

# Child class inheriting from Vehicle
class Car(Vehicle):
    def drive(self):
        print("Car is being driven.")

# Create object of child class
my_car = Car()

# Call methods from both parent and child
my_car.start_engine()  # Inherited from Vehicle
my_car.drive()         # Defined in Car




#######################################


from flask import Flask

app = Flask(__name__)
@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"


app.run()




#######################################



from flask import Flask

app = Flask(__name__)
@app.route("/")
def hello_world():
    return "<p>this is main page</p>"

@app.route("/about")
def about():
    return "<p>this is about page</p>"


@app.route("/careers")
def carrers():
    return "<p>careers page</p>"



app.run()



#######################################




#######################################




from flask import Flask, render_template, flash, request
from wtforms import Form, StringField, TextAreaField, validators, SubmitField
from wtforms.validators import DataRequired, Length

# App config
DEBUG = True
app = Flask(__name__)
app.config.from_object(__name__)
app.config['SECRET_KEY'] = '11117d441f27d441f27567d441f2b6176a'

# WTForms class
class ReusableForm(Form):
    name = StringField('Name:', validators=[DataRequired()])
    email = StringField('Email:', validators=[DataRequired(), Length(min=6, max=35)])
    password = StringField('Password:', validators=[DataRequired(), Length(min=3, max=35)])

@app.route("/", methods=['GET', 'POST'])
def hello():
    form = ReusableForm(request.form)

    print(form.errors)
    if request.method == 'POST' and form.validate():
        name = form.name.data
        email = form.email.data
        password = form.password.data

        print(name, " ", email, " ", password)
        flash(f'Thanks for registration {name}')
    elif request.method == 'POST':
        flash('Error: All the form fields are required.')

    return render_template('hello.html', form=form)

if __name__ == "__main__":
    app.run(debug=True)





user1,Admin@123,https://650782130948.signin.aws.amazon.com/console     Giri


user2,Admin@123,https://650782130948.signin.aws.amazon.com/console     Udheshna


user3,Admin@123,https://650782130948.signin.aws.amazon.com/console   Jyothi


user4,Admin@123,https://650782130948.signin.aws.amazon.com/console   Swathy

user5,Admin@123,https://650782130948.signin.aws.amazon.com/console    Sridevi

user6,Admin@123,https://650782130948.signin.aws.amazon.com/console    Ravi






import boto3

aws_access_key = "youraccess"
aws_secret_key = "yoursecret"
bucket_name = "giri28062025"


s3 = boto3.client('s3',aws_access_key_id = aws_access_key , aws_secret_access_key=aws_secret_key)
print(s3)


response = s3.list_objects_v2(Bucket = bucket_name)

print(response)

if 'Contents' in response:
    for object in response['Contents']:
        print(object['Key'])


######################
#    display files from bucket
#    display all the buckets
#.   uploading a file
######################




import boto3

aws_access_key = "youraccess"
aws_secret_key = "yourkey"
bucket_name = "giri28062025"


s3 = boto3.client('s3',aws_access_key_id = aws_access_key , aws_secret_access_key=aws_secret_key)
print(s3)


response = s3.list_objects_v2(Bucket = bucket_name)

print(response)

if 'Contents' in response:
    for object in response['Contents']:
        print(object['Key'])


#### list buckets
print("################# display all buckets #################")
response = s3.list_buckets()
print("S3 Buckets:")
for bucket in response['Buckets']:
    print(bucket['Name'])

print("################# file uploading #################")
filename = "employee.csv"
### upload file
s3.upload_file(filename,bucket_name,filename)
print("file uploaded")



